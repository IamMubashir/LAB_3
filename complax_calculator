#include <iostream>
#include <cmath>

using namespace std;

class Complex {
private:
    double real;
    double imag;

public:
    Complex(double r, double i) : real(r), imag(i) {}

    // Addition
    Complex operator+(const Complex& other) const {
        return Complex(real + other.real, imag + other.imag);
    }

    // Subtraction
    Complex operator-(const Complex& other) const {
        return Complex(real - other.real, imag - other.imag);
    }

    // Multiplication
    Complex operator*(const Complex& other) const {
        return Complex(real * other.real - imag * other.imag,
                       real * other.imag + imag * other.real);
    }

    // Division
    Complex operator/(const Complex& other) const {
        double denominator = other.real * other.real + other.imag * other.imag;
        return Complex((real * other.real + imag * other.imag) / denominator,
                       (imag * other.real - real * other.imag) / denominator);
    }

    // Magnitude (absolute value)
    double magnitude() const {
        return sqrt(real * real + imag * imag);
    }

    // Print
    void print() const {
        if (imag < 0)
            cout << real << " - " << -imag << "i";
        else
            cout << real << " + " << imag << "i";
    }
};

int main() {
    Complex a(3, 4);
    Complex b(1, -2);

    // Addition
    cout << "Addition: ";
    (a + b).print();
    cout << endl;

    // Subtraction
    cout << "Subtraction: ";
    (a - b).print();
    cout << endl;

    // Multiplication
    cout << "Multiplication: ";
    (a * b).print();
    cout << endl;

    // Division
    cout << "Division: ";
    (a / b).print();
    cout << endl;

    // Magnitude
    cout << "Magnitude of a: " << a.magnitude() << endl;
    cout << "Magnitude of b: " << b.magnitude() << endl;

    return 0;
}
